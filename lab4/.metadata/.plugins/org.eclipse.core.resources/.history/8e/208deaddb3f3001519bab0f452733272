#include "udp.h"
#include "ip.h"
#include "basic_io.h"
#include "layers/ethernet_layer.h"

// creates and transmits packet
void udpSend(
    char* data, 
    int length, 
    EthernetInfo* info) 
{
    printf("Sent: %s\n", data);
    
    UDPFrame udpFrame;
    fillUDPHeader(&udpFrame, info->localPort, info->destPort, data, valueSize); //fills IP header with default values
    //printUDPHeader(&udpFrame);
    unsigned char UDPData[UDP_HEADER_LENGTH + valueSize];
    int UDPLength = UDPPack(&udpFrame, UDPData);
    
    ipSend(UDPData, UDPLength)
}

// receives and decodes packet
int udpReceive(
    char* data, 
    int dataLength, 
    char* returnedData, 
    EthernetInfo* info) 
{
    printf("Received %d bytes:\n", dataLength);
    
    int bufferSize = -1;
    
    ethernetFrame ethFrame;
    ethFrame.data = (unsigned char*) malloc(sizeof(unsigned char)*(dataLength - ETHERNET_HEADER_LENGTH));
    if (ethUnpack(data, dataLength, &ethFrame, info->localMAC)) {
        //printEthernetHeader(&ethFrame);
        
        IPFrame ipFrame;
        ipFrame.data = (unsigned char*) malloc(sizeof(unsigned char)*(ethFrame.dataLength - IP_HEADER_LENGTH));
        if (IPUnpack(ethFrame.data, &ipFrame, info->localIP)) {
            //printIPHeader(&ipFrame);
            
            UDPFrame udpFrame;
            udpFrame.data = returnedData;
            if (UDPUnpack(ipFrame.data, &udpFrame, info->localPort)) {
                //printUDPHeader(&udpFrame);
                bufferSize = ipFrame.dataLength - UDP_HEADER_LENGTH;
            }
        }
        free(ipFrame.data);
    }
    free(ethFrame.data);
    return bufferSize;
}
