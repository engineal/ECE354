#include "hello_led.h"
#include "basic_io.h"
#include "custom_io.h"
#include "LCD.h"
#include "image.h"
#include "net/udp.h"
#include "net/ethernet.h"
#include "interpretCommand.h"

#define LOCAL_MAC {0x01, 0x60, 0x6E, 0x11, 0x02, 0xFF}
#define LOCAL_IP_ADDR {192, 168, 1, 116}
#define LOCAL_PORT 1115

#define DEST_MAC {0x01, 0x60, 0x6E, 0x11, 0x02, 0xFF}
#define DEST_IP_ADDR {192, 168, 1, 116}
#define DEST_PORT 1115

UDPInfo* ethInfo;

char bin_pix[X][Y];

void handle_button_interrupts()
{
    printf("%d\n", get_pio_edge_cap(BUTTON_PIO_BASE));
    /*int value = readButtons();
    if (oldValue != value && value != 0x0F) 
    {
        printf("Buttons: %x\n", value);
        int switches = readSwitches();
        
        if (switches >= 0x0 && switches < 0x9)
        {
            char data[] = {switches};
            printf("Sending %d\n", switches);
            udpSend(data, 1, ethInfo);
        }   
    }
    oldValue = value;*/
    set_pio_edge_cap(BUTTON_PIO_BASE,0x0);
}

void init_button_irq()
{
    /* Enable all 4 button interrupts. */
    set_pio_irq_mask(BUTTON_PIO_BASE, BUTTON_INT_MASK);
    /* Reset the edge capture register. */
    set_pio_edge_cap(BUTTON_PIO_BASE, 0x0);
    /* Register the interrupt handler. */
    alt_irq_register(BUTTON_PIO_IRQ, NULL, (void*)handle_button_interrupts); 
}

int main(void)
{
    // Default Ethernet settings.
    UDPInfo i;   
    char localIP[] = LOCAL_IP_ADDR; 
    char localMAC[] = LOCAL_MAC;
    char destIP[] = DEST_IP_ADDR;
    char destMAC[] = DEST_MAC;
    i.localIP = localIP;
    i.localMAC = localMAC;
    i.localPort = LOCAL_PORT;    
    i.destIP = destIP;
    i.destMAC = destMAC;
    i.destPort = DEST_PORT;
    ethInfo = &i;
    
    LCD_Test();
    ethernetInit(ethInfo->localMAC);
    init_button_irq();
    
    writeLEDs(0);
    
    //int oldValue = 0x0F;
    
    while (1)
    {
        // -- SEND --
        /*int value = readButtons();
        if (oldValue != value && value != 0x0F) 
        {
            printf("Buttons: %x\n", value);
            int switches = readSwitches();
            
            if (switches >= 0x0 && switches < 0x9)
            {
                char data[] = {switches};
                printf("Sending %d\n", switches);
                udpSend(data, 1, ethInfo);
            }   
        }
        oldValue = value;*/
        
        // -- RECEIVE --
        unsigned char data[1024];
        int size = udpReceive(data, ethInfo);
        if (size > 0) {
            // If size = 1, it must be a commanding message
            if (size == 1) {
                printf("Interpreting Command...\n");
                
                if (data[0] < 0x09)
                    writeLEDs(data[0]);
                else if (data[0] == 0xAA || data[0] == 0xFF)
                    writeGreenLEDs(0xFF);
                //interpretCommand(data[0]);
            }
        }
        
        msleep(10);
    }

    return 0;
}

//-------------------------------------------------------------------------

