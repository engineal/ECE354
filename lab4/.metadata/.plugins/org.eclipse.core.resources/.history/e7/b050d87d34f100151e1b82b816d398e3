#include "basic_io.h"
#include "hello_led.h"
#include "LCD.h"
#include "DM9000A.C"
#include "ethernet.h"
#include "image.h"
#include "handshake.h"

unsigned char RXT[68];
int packet_num;

#define LOCAL_MAC {0x01, 0x60, 0x6E, 0x11, 0x02, 0xFF}
#define LOCAL_IP_ADDR {192, 168, 1, 116}
#define LOCAL_PORT 1115

#define DEST_MAC {0x01, 0x60, 0x6E, 0x11, 0x02, 0xFF}
#define DEST_IP_ADDR {192, 168, 1, 116}
#define DEST_PORT 1115

EthernetInfo* ethInfo;

char bin_pix[X][Y];

// run everytime an ethernet interrupt is generated
void ethernet_interrupts()
{
    packet_num++;
    int rx_len = 0;
    int aaa=ReceivePacket(RXT,&rx_len);
    if(!aaa)
    {
        unsigned char data[1024];  
        int size = decode_message(RXT, rx_len, data, ethInfo);
        
        //interpretCommand(data+1, data[0]);
         
        
        unsigned int rx_val = ((data[0]&0xFF)<<8) | data[1] | ((data[2]&0xFF)<<16);
        printf("%x\n\n", rx_val);
        writeLEDs(rx_val);     
    }
    
    writeDecimalLCD(packet_num);
}

int main(void)
{
    ethInfo = malloc(sizeof(EthernetInfo));
    EthernetInfo info;
    info.localIP = LOCAL_IP_ADDR;
    info.localMAC = LOCAL_MAC;
    info.localPort = LOCAL_PORT;    
    info.destIP = DEST_IP_ADDR;
    info.destMAC = DEST_MAC;
    info.destPort = DEST_PORT;
    
    LCD_Test();
    DM9000_init(ethInfo.localMAC);
    alt_irq_register(DM9000A_IRQ, NULL, (void*)ethernet_interrupts);
    
    packet_num=0;
    writeDecimalLCD(packet_num);
    writeLEDs(0);
    
    int oldValue = 0;
    while (1)
    {
        // -- SEND --
        int value = readSwitches();
        if (oldValue != value) {
            char data[] = {MSG_GET_IMAGE};
            encode_message(data, 3, ethInfo);
            //char data[] = {(value>>8)&0xFF, (value)&0xFF, (value>>16)&0xFF};
            //encode_message(data, 3, port, destPort, ip_addr, destIP, destMAC, ether_addr);
            oldValue = value;
        }
        
        msleep(100);
    }

    return 0;
}

void interpretCommand(char* data, alt_u32 command) {
    writeLEDs(command);
    switch (command) {
        //ACK
        case MSG_ACK:
            break;
        //NAK
        case MSG_NAK:
            break;
        //Get image from flash
        case MSG_GET_IMAGE:
            
            //readFlash(bin_pix);
            break;
        //Transmit image
        case MSG_TRANSMIT_IMAGE:
            break;
        //Flip
        case MSG_IMAGE_PROC_1:
            imageFlip(bin_pix);
            break;
        //Invert
        case MSG_IMAGE_PROC_2:
            imageInvert(bin_pix);
            break;
        //Rotate
        case MSG_IMAGE_PROC_3:
            imageRotate(bin_pix);
            break;
        case MSG_IMAGE_PROC_4:
            break;
        case MSG_IMAGE_PROC_5:
            break;
        case MSG_IMAGE_PROC_6:
            break;
    }
}

int readSwitches()
{
    return inport(SWITCH_PIO_BASE);
}

void writeLEDs(int value)
{
    outport(LED_RED_BASE,value);
}

void writeDecimalLCD(int value)
{
    int digits=0;
    
    int i;
    for(i=0; i<8; i++)
    {
        digits |= (value % 10)<<(i*4);
        value = value/10;   
    }
    
    outport(SEG7_DISPLAY_BASE,digits);
}
//-------------------------------------------------------------------------

