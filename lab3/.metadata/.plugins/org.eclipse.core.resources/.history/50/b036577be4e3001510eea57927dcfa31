#include "IP_layer.h"
#include "helper.h"

// Takes a full IPFrame struct and stores it into
// output, ready for transmission.
int IPPack(IPFrame* frame, unsigned char* output)
{
    //store version & headerLength in byte 0
    output[0] = ((frame->version & 0xF))<<4)|(frame->headerLength & 0xF);
    
    //type of service: unused
    output[1] = 0x00; 
   
    //store packetLength
    output[2] =
    output[3] = 
    
    //store identification 
    output[4] = 
    output[5] = 
    
    //flags, evil bit, fragment offset, TTL, protocol: unused
    int i;
    for(i=6; i<10; i++)
    {
        output[i] = 0x00;
    }
    
    //
}

// Takes char* input which holds transmitted packet and interprets it,
// storing the result in an IPFrame struct.
int IPUnpack(unsigned char* input, int inputLength, IPFrame* frame)
{

}

// Generates IP header checksum for frame and stores it in 
// checksum field in struct.
// "The checksum field is the 16-bit one's complement of the one's 
// complement sum of all 16-bit words in the header. 
// For purposes of computing the checksum, the value of the checksum 
// field is zero."
void generateIPChecksum(IPFrame* frame)
{
    
}